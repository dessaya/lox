package main

// autogenerated with `python generate_ast.py .`

type Expr interface {
	accept(v ExprVisitor) interface{}
}

type Assign struct {
	name  *Token
	value Expr
}

func NewAssign(name *Token, value Expr) *Assign {
	return &Assign{
		name:  name,
		value: value,
	}
}

func (a *Assign) accept(ev ExprVisitor) interface{} {
	return ev.visitAssignExpr(a)
}

type Binary struct {
	left     Expr
	operator *Token
	right    Expr
}

func NewBinary(left Expr, operator *Token, right Expr) *Binary {
	return &Binary{
		left:     left,
		operator: operator,
		right:    right,
	}
}

func (b *Binary) accept(ev ExprVisitor) interface{} {
	return ev.visitBinaryExpr(b)
}

type Call struct {
	callee    Expr
	paren     *Token
	arguments []Expr
}

func NewCall(callee Expr, paren *Token, arguments []Expr) *Call {
	return &Call{
		callee:    callee,
		paren:     paren,
		arguments: arguments,
	}
}

func (c *Call) accept(ev ExprVisitor) interface{} {
	return ev.visitCallExpr(c)
}

type Grouping struct {
	expression Expr
}

func NewGrouping(expression Expr) *Grouping {
	return &Grouping{
		expression: expression,
	}
}

func (g *Grouping) accept(ev ExprVisitor) interface{} {
	return ev.visitGroupingExpr(g)
}

type Literal struct {
	value interface{}
}

func NewLiteral(value interface{}) *Literal {
	return &Literal{
		value: value,
	}
}

func (l *Literal) accept(ev ExprVisitor) interface{} {
	return ev.visitLiteralExpr(l)
}

type Logical struct {
	left     Expr
	operator *Token
	right    Expr
}

func NewLogical(left Expr, operator *Token, right Expr) *Logical {
	return &Logical{
		left:     left,
		operator: operator,
		right:    right,
	}
}

func (l *Logical) accept(ev ExprVisitor) interface{} {
	return ev.visitLogicalExpr(l)
}

type Unary struct {
	operator *Token
	right    Expr
}

func NewUnary(operator *Token, right Expr) *Unary {
	return &Unary{
		operator: operator,
		right:    right,
	}
}

func (u *Unary) accept(ev ExprVisitor) interface{} {
	return ev.visitUnaryExpr(u)
}

type Variable struct {
	name *Token
}

func NewVariable(name *Token) *Variable {
	return &Variable{
		name: name,
	}
}

func (v *Variable) accept(ev ExprVisitor) interface{} {
	return ev.visitVariableExpr(v)
}

type ExprVisitor interface {
	visitAssignExpr(a *Assign) interface{}
	visitBinaryExpr(b *Binary) interface{}
	visitCallExpr(c *Call) interface{}
	visitGroupingExpr(g *Grouping) interface{}
	visitLiteralExpr(l *Literal) interface{}
	visitLogicalExpr(l *Logical) interface{}
	visitUnaryExpr(u *Unary) interface{}
	visitVariableExpr(v *Variable) interface{}
}
